#!/bin/bash
# runPM
# Automated bash script for running entire the phenotype microarray analysis
#
# Author: Daniel A Cuevas
# Created on 22 Nov 2013
# Updated on 14 Nov 2017

VERSION="2.5"

printversion() {
    echo "
        ___          _               _
       / _ \/\/\    /_\  _ __   __ _| |_   _ _______ _ __
      / /_)/    \  //_\\\| '_ \ / _\` | | | | |_  / _ \ '__|
     / ___/ /\/\ \/  _  \ | | | (_| | | |_| |/ /  __/ |
     \/   \/    \/\_/ \_/_| |_|\__,_|_|\__, /___\___|_|
                                        |___/

PMAnalyzer version $VERSION
" >&1 | tee -a $log
}


usage() {
    echo "$2
usage: $scriptname -c config_filename [Options]
OR
usage: $scriptname -i PM_data_directory -d output_directory -o output_name [Options]

Required
   -c [config_filename]    : Configuration file listing all parameters (this takes precedence)
   OR
   -i [PM_data_directory]  : PM data directory path to files
   -d [output_directory]   : Output directory (will create if non-existent)
   -o [output_name]        : Suffix appended to all output files

Optional
   --clear                 : Clear out results directory of old files
   --debug                 : Print out debug messages
   -g [type]               : Flag to use experimental growth level calculation. Range: [1, 3]
   -h, -?, --help          : This help message
   -m                      : Generate figures
   -p [plate_filename]     : Plate filepath
   --python [file path]    : Use specified Python executable [Default: /usr/local/bin/python3]
   -s [sample_filename]    : Sample name and replicate file [used with -t 3 or 4]
   -t [input_file_type]    : Parser number for input format. Range: [1, $1] [Default: 1]
   -v                      : Verbose output

NOTES
    FILE NAME FORMATS:
        <Sample Name>_<Replicate Letter>_<other text>.txt
        Regex used:    <Sample Name> -- [A-Za-z0-9-.]+
                       <Replicate Letter> -- [A-Za-z0-9]+

" >&2
}

error() {
    echo "*****FATAL ERROR OCCURRED*****" >&1 | tee -a $log
    echo $1 >&1 | tee -a $log
    exit 1
}

checkConfigFile() {
    configfile_secured="/tmp/PMAnalyzer_secured.cfg"
    if egrep -q -v '^#|^[^ ]*=[^;]*' "$1"; then
        getTime && echo "${currtime}    Config file is improper. Attempting to clean..." >&2
        # filter the original to a new file
        egrep '^#|^[^ ]*=[^;&]*'  "$configfile" > "$configfile_secured"
        getTime && echo "${currtime}    Cleaned config file @ ${configfile_secured}" >&2
        configfile="$configfile_secured"
    fi
    source "$configfile"
}

checkInputDirectory() {
    if [[ ! -d $1 ]]; then
        getTime && error "${currtime}    Directory '$1' does not exist."
    fi
    # Store directory in new variable and remove trailing slash
    inputfiledir=$(echo $inputfiledir | perl -ne 'chomp; s/\/$//; print;')

    inputfile=$(ls $1)
}

checkOutputDir() {
    # Remove trailing slash
    outputdir=$(echo $1 | perl -ne 'chomp; s/\/$//; print;')
    # Check to see if directory needs to be created
    if [[ ! -d $1 ]]; then
        getTime && echo "${currtime}    Output directory '$1' does not exist. Creating now."  >&1 | tee -a $log
        mkdir $1
    fi
}


checkScriptDir() {
    if [[ -z $1 ]]; then
        pyscriptdir="./" # Script directory is current directory
    else
        [[ ! -d $1 ]] && getTime && error "${currtime}    Script directory '$1' does not exist."
        pyscriptdir=$1
    fi
    # Remove trailing slash
    pyscriptdir=$(echo $pyscriptdir | perl -ne 'chomp; s/\/$//; print;')
}


getTime() {
    currtime=$(date "+[%F %H:%M:%S]")
}

timeStamp() {
    timestamp=$(date "+%Y%m%dT%H%M%S")
}

####################################################
#ARGUMENT PARSING
####################################################

scriptdir=$(cd $(dirname $0); pwd -P)
pyscriptdir=$(cd $(dirname $0); pwd -P)/py
parserscriptdir=$pyscriptdir/Parsers
plscriptdir=$(cd $(dirname $0); pwd -P)/pl
rscriptdir=$(cd $(dirname $0); pwd -P)/r
scriptname=$(echo $0 | perl -ne '/\/?.*\/(.+)/; print $1;')
growthflag=""
verboseFlag=""
debugFlag=""
imageFlag=""
frmtype=1
frmmax=6
samplefile=""
pythonexec="/usr/local/bin/python3"

# Set pipefail for catching errors in piped commands
set -o pipefail

while [[ $# != 0 ]]; do
    case $1 in
    -h|-\?|--help)
        usage $frmmax
        exit 2
        ;;
    --clear)
        clearRes=0
        ;;
    -c)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing config filename" >&2 && usage $frmmax && exit 2
        configfile=$1
        ;;
    -d)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing -d value" >&2 && usage $frmmax && exit 2
        outputdir=$1
        ;;
    --debug)
        debugFlag="--debug"
        ;;
    -g)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing -g value" >&2 && usage $frmmax && exit 2
        growthflag="-g $1"
        ;;
    -i)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing -i value" >&2 && usage $frmmax && exit 2
        inputfiledir=$1
        ;;
    -m)
        imageFlag="-i"
        ;;
    -o)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing -o value" >&2 && usage $frmmax && exit 2
        outputname=$1
        ;;
    -p)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing -p value" >&2 && usage $frmmax && exit 2
        plate=$1
        ;;
    --python)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing --python value" >&2 && usage $frmmax && exit 2
        pythonexec=$1
        ;;
    -s)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing -s value" >&2 && usage $frmmax && exit 2
        samplefile=$1
        ;;
    -t)
        shift
        [[ ! $1 || $(printf "%s" "$1" | perl -ne 'm/(^-.$)/; print $1;') ]] && echo "Missing -t value" >&2 && usage $frmmax && exit 2
        frmtype=$1
        ;;
    -v)
        verbose=0;
        verboseFlag="-v"
        ;;
    *)
        echo "Unknown option $1" >&2
        usage $frmmax
        exit 2
    esac
    shift
done

# Check if config file was supplied
if [[ $configfile ]]; then
    checkConfigFile $configfile
fi

# Check if required variables are set
if [[ ! $inputfiledir ||
    ! $outputname ||
    ! $outputdir ]]; then
    usage $frmmax "Missing one or more required arguments."
    exit 2
fi

if [[ $frmtype -eq 3 ]] &&
    [[ ! $samplefile ]]; then
    usage $frmmax "Missing -s options."
    exit 2
fi


# Set internal field separator for files with spaces
SAVEIFS=$IFS
IFS=$(echo -en '\n\b')

# Set locale
export LANG="en_US.UTF-8"

# Create log file
timeStamp
log="${outputdir}/PMAnalyzer_out_${timestamp}.txt"

# Remove leading slashes from output directory
checkOutputDir $outputdir

# Print version header
printversion

# Check to empty out results folder
if [[ $clearRes ]]; then
    getTime
    echo "${currtime}    Clearing results folder"  >&1 | tee -a $log
    rm $outputdir/*
fi

# Check if input file or directory exists
checkInputDirectory $inputfiledir


# Check if script direectory exists
checkScriptDir $pyscriptdir

# Check for UTF-8 encodings
getTime && echo "${currtime}    *****Checking character encodings*****"  >&1 | tee -a $log
for f in ${inputfile[@]}; do
    enc=$(file --mime "$inputfiledir/$f" | egrep -ic "utf-8|us-ascii")
    if [[ $enc -eq 0 ]]; then
        f=$(echo "$f" | perl -ne 's/([\(\)])/\\$1/g; print;') # Escape any parentheses in input file name
        encoding=$(file --mime "$inputfiledir/$f" | perl -ne '/charset=(.*)/; print $1')
        cmd="iconv -f $encoding -t UTF-8 \"$inputfiledir/$f\" > tmp.txt && mv tmp.txt \"$inputfiledir/$f\""
        [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
        eval $cmd  2>&1 | tee -a $log
        [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"
    else
        getTime && echo "${currtime}    $f is OK!" >&1 | tee -a $log
    fi
done

# Convert input files line endings from DOS to UNIX
getTime && echo "${currtime}    *****Checking line endings*****"  >&1 | tee -a $log
for f in ${inputfile[@]}; do
    #f=$(echo "$f" | perl -ne 's/([\(\)])/\\$1/g; print;') # Escape any parentheses in input file name
    cmd="perl -i -pe 's/\r\n?/\n/g' \"$inputfiledir/$f\""
    [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
    eval $cmd  2>&1 | tee -a $log
    [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"
done

# Check which parser to use
case $frmtype in
    1)
        p_script="mapsParser1.py"
        ;;
    2)
        p_script="info_vs_time.py"
        ;;
    3)
        p_script="mapsParser2.py \"$samplefile\""
        ;;
    4)
        p_script="mapsParser3.py \"$samplefile\""
        ;;
    5)
        p_script="mapsParser4.py"
        ;;
    6)
        p_script="mapsParser5.py"
        ;;
    *)
        echo "Format type must be an integer within the range [1, $frmmax]."  >&2 | tee -a $log
        #echo "Format type must be an integer within the range [1, $frmmax]." >>$log
        usage $frmmax
        exit 2
esac

################################################
#ANALYST PARSING
################################################

getTime && echo "${currtime}    *****Parsing analyst files*****"  >&1 | tee -a $log
out="raw_curves_${outputname}.txt"

# Check if plate was supplied
if [[ $plate ]]; then
    cmd="$pythonexec ${parserscriptdir}/${p_script} $inputfiledir -p $plate > $outputdir/${out}"
else
    cmd="$pythonexec ${parserscriptdir}/${p_script} $inputfiledir > $outputdir/${out}"
fi
[[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
eval $cmd 2>&1 | tee -a $log
[[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

# If parser format is 2, plate information is included already
if [[ $frmtype -eq 2 ]]; then
    plate=0
fi

################################################
#ANALYSIS
################################################

if [[ $plate ]]; then
    pflag="-p"
else
    pflag=""
fi
in="$outputdir/${out}"
cmd="$pythonexec ${pyscriptdir}/pmanalysis.py $in $outputdir -o $outputname $pflag $growthflag $verboseFlag $debugFlag $imageFlag"
getTime && echo "${currtime}    *****Starting modeling script*****"  >&1 | tee -a $log
[[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
eval $cmd  2>&1 | tee -a $log
[[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

# Statistics
in="${outputdir}/logistic_params_sample_${outputname}.txt"
cmd="$pythonexec ${pyscriptdir}/pmanalyzer_statistics.py $in $outputdir -o $outputname $verboseFlag $pflag"
getTime && echo "${currtime}    *****Starting statistics script*****"  >&1 | tee -a $log
[[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
eval $cmd  2>&1 | tee -a $log
[[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

################################################
#PLOTS
################################################
if [ -n "$imageFlag" ]; then
    getTime && echo "${currtime}    *****Creating figures*****"  >&1 | tee -a $log

    getTime && echo "${currtime}    Generating box plots and density plots"  >&1 | tee -a $log
    in="${outputdir}/logistic_params_sample_${outputname}.txt"
    cmd="Rscript ${rscriptdir}/box_and_density.R -i $in -o $outputdir $pflag"
    [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
    eval $cmd  2>&1 | tee -a $log
    [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

    getTime && echo "${currtime}    Generating growth curve plots for each sample"  >&1 | tee -a $log
    in="${outputdir}/raw_curves_${outputname}.txt"
    out="${outputdir}/raw_curves"
    cmd="Rscript ${rscriptdir}/createGrowthPlots.R -i $in -o $out -s -c replicate -f png $pflag"
    [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
    eval $cmd  2>&1 | tee -a $log
    [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

    getTime && echo "${currtime}    Generating average plot for each sample"  >&1 | tee -a $log
    in="${outputdir}/raw_curves_${outputname}.txt"
    out="${outputdir}/avg"
    cmd="Rscript ${rscriptdir}/createGrowthPlots.R -i $in -o $out -s -e -c all -f png -l average $pflag"
    [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
    eval $cmd  2>&1 | tee -a $log
    [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

    getTime && echo "${currtime}    Generating logistic fitted plot for each sample"  >&1 | tee -a $log
    in="${outputdir}/logistic_curves_sample_${outputname}.txt"
    out="${outputdir}/log"
    cmd="Rscript ${rscriptdir}/createGrowthPlots.R -i $in -o $out -s -c replicate -f png -l \"logistic fitted\" $pflag"
    [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
    eval $cmd   2>&1 | tee -a $log
    [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

    getTime && echo "${currtime}    Generating median plot of all samples"  >&1 | tee -a $log
    in="${outputdir}/all_curves_median_${outputname}.txt"
    out="${outputdir}/all_median"
    cmd="Rscript ${rscriptdir}/createGrowthPlots.R -i $in -o $out -c sample -f png -l \"median\" $pflag"
    [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
    eval $cmd  2>&1 | tee -a $log
    [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

    getTime && echo "${currtime}    Generating growth heatmap"  >&1 | tee -a $log
    in="${outputdir}/logistic_params_mean_${outputname}.txt"
    out="${outputdir}/growthlevels"
    cmd="Rscript ${rscriptdir}/growthHeatmap.R -i $in -o $out -f png $pflag"
    [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
    eval $cmd  2>&1 | tee -a $log
    [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"

    getTime && echo "${currtime}    Generating growth classification heatmap"  >&1 | tee -a $log
    in="${outputdir}/logistic_params_mean_${outputname}.txt"
    out="${outputdir}/growthclass"
    cmd="Rscript ${rscriptdir}/growthClassHeatmap.R -i $in -o $out -f png $pflag"
    [[ $verbose ]] && getTime && echo "${currtime}    Executing $cmd"  >&1 | tee -a $log
    eval $cmd  2>&1 | tee -a $log
    [[ $? -ne 0 ]] && getTime && error "${currtime}    Fail on command: $cmd"
else
    getTime && echo "${currtime}    *****Figures flag not given*****"  >&1 | tee -a $log
fi

# Restore internal field separator
IFS=$SAVEIFS
getTime && echo "${currtime}    *****Completed!*****"  >&1 | tee -a $log
